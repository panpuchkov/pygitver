name: Build & Push
permissions: write-all

on:
  push:
    branches:
      - main
      - feat/*
      - feature/*
      - fix/*
      - bugfix/*
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: 'pygitver'
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  unittests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Dockerfile lint
        id: validate-dockerfile
        shell: bash
        run: |
          docker run --rm -e HADOLINT_IGNORE=DL3018,DL3013 -i hadolint/hadolint < Dockerfile

      - name: Unit Tests
        shell: bash
        run: |
          set -x
          pip install -U tox
          pip install tox
          tox

  build:
    runs-on: ubuntu-latest
    needs: unittests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker Build
        shell: bash
        run: |
          set -x
          docker build -t "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}" .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Detect package version
        shell: bash
        run: |
          set -x
          PACKAGE_VERSION="$(git tag --contains)"
          if [[ "${PACKAGE_VERSION}" == "" ]]; then
            PACKAGE_VERSION="$(docker run --rm -v $(pwd):/app -w /app --user "$(id -u):$(id -g)" panpuchkov/pygitver --next-ver)-dev"
            PACKAGE_VERSION=$(echo "${PACKAGE_VERSION}" | sed 's/^v*//' )
            DOCKER_TAG_LATEST="${PACKAGE_VERSION}"
          else
            DOCKER_TAG_LATEST="latest"
          fi

          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "DOCKER_TAG_LATEST=$DOCKER_TAG_LATEST" >> $GITHUB_ENV

      - name: Docker Push
        shell: bash
        run: |
          set -x
          # Generate docker tags
          IMAGE_NAME_WITH_TAG_VERSION="${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${PACKAGE_VERSION}"
          IMAGE_NAME_WITH_TAG_LATEST="${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${DOCKER_TAG_LATEST}"
          
          # Set docker tag
          docker tag "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${PACKAGE_VERSION}"
          docker push "${IMAGE_NAME_WITH_TAG_VERSION}"
          
          # Push latest if required
          if [[ "${DOCKER_TAG_LATEST}" == "latest" ]]; then
            docker tag "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest" "${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
            docker push "${IMAGE_NAME_WITH_TAG_LATEST}"
          fi

      - name: Pip Build & Push
        shell: bash
        run: |
          set -x
          sudo apt-get -y install twine
          pip install -r requirements-build.txt
          python -m build
          twine check dist/*
          twine upload --skip-existing -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/* --verbose
